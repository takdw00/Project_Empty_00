using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace BTSystem
{
    // 개념을 분명히 하자면, 블랙보드는 [BT노드의 의사결정에 영향을 미칠 수 있는 데이터들을 모아 놓는 BT전용 데이터 집합소]입니다.

    // 블랙보드를 사용하는 이유
    // 1. 반복 계산되는 데이터 캐시를 통한 성능 절약 
    // 2. 노드 간 정보 상호 공유
    // 3. 데이터 집중화를 통한 참조 과정 단순화

    // 캐릭터가 가지고 있기에는 애매하지만 액션 노드의 특정 행동 판단에는 필수적인 정보들이 있습니다. 이 정보들은 액션 노드에 저장하고 그 때 그 때 계산하여 사용할 수밖에 없습니다.
    // 액션 노드 특성상 매 번 Execute 될 때마다 다시 계산해야 되는 구조도 많아 반복적이고 같은 계산을 하느라 낭비되는 자원도 생깁니다.
    // 또한 다른 액션 노드에서 그 내용을 참조하기가 어렵습니다. 이 경우에도 개별 노드가 같은 데이터임에도 각자 따로 계산을 해야 하는 처지에 놓입니다.
    // (여기서 언급한 것은 개인이 소유한 노드들 간 데이터 공유를 의미합니다. 다른 캐릭터와 데이터 공유를 의미하는 것이 아닙니다.)
    // 이와 같은 정보들을 블랙보드에 캐시하여 성능의 낭비를 막습니다. 또 여러 곳에서의 참조의 어려움도 어느 정도 해소합니다.
    // AI가 무언가를 판단하려면 많은 정보가 필요할 텐데, 이 정보들을 찾아오기 위해 여러 컴포넌트들의 복잡한 참조 과정을 거치게 됩니다.
    // 블랙보드에 필요한 데이터를 중앙 집중화시켜 캐시해두고 접근을 쉽게 하면 데이터를 찾아오는 과정을 간단히 할 수 있습니다.
    // 액션 노드에서는 이를 기반으로 데이터보다는 행동 논리에 더 집중할 수 있게 됩니다.

    // 개인별 블랙보드, 글로벌 블랙보드
    // 개인별 블랙보드 : 위에서 설명한 것과 같습니다. 플레이어 개인 기준의 데이터들이 들어가야 합니다. 차후에 필요성이 느껴질 때 구현합니다.
    // 글로벌 블랙보드 : 위에서 설명한 것과 비슷하지만, 블랙보드를 개인이 각각 소유하는 형태가 아닙니다. 캐릭터가 다 같이 공유하는 형태입니다.
    // 따라서 글로벌 블랙보드의 데이터들은 개인적인 데이터보다는 큰 그림에 해당하는 데이터들이 주로 들어갑니다.

    // 이 스크립트는 글로벌 블랙보드를 나타내며, 싱글톤이기에 어디서든 접근할 수 있습니다.
    public class GlobalBlackboard : Singleton<GlobalBlackboard>
    {
        protected override void Awake()
        {
            base.Awake();
        }

        protected override void OnDestroy()
        {
            base.OnDestroy();
        }

        //현재 플레이어가 조종하고 있는 캐릭터
        public CharacterManager playerCharacter;
    }
}